---
http_interactions:
- request:
    method: get
    uri: https://libraries.io/api/search?platforms=Rubygems&q=deep-cover&sort=stars
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.2
  response:
    status:
      code: 200
      message: 
    headers:
      date:
      - Fri, 14 Sep 2018 22:55:14 GMT
      content-type:
      - application/json; charset=utf-8
      transfer-encoding:
      - chunked
      connection:
      - close
      set-cookie:
      - __cfduid=d741fca5233a7c12abc8b9ceb1845b2741536965675; expires=Sat, 14-Sep-19
        22:54:35 GMT; path=/; domain=.libraries.io; HttpOnly
      vary:
      - Accept-Encoding, Origin
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      x-content-type-options:
      - nosniff
      per-page:
      - '30'
      total:
      - '3'
      x-ratelimit-limit:
      - '30'
      x-ratelimit-remaining:
      - '29'
      cache-control:
      - max-age=0, private, must-revalidate
      x-request-id:
      - 44ebe509-83bb-4325-aacb-55578825d961
      x-runtime:
      - '0.205554'
      expect-ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      server:
      - cloudflare
      cf-ray:
      - 45a66facfd33ab48-YYZ
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Fri, 14 Sep 2018 22:55:14 GMT
recorded_with: VCR 3.0.3
